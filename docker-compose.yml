version: '3.8'

services:
  order-manager-service:
    container_name: order-manager-service
    build:
      context: ./order-manager
    depends_on:
      - order-db
      - kafka
    networks:
      - backend
    environment:
      DB_HOST: order-db
      KAFKA_BROKERS: 'kafka:9092'
  order-fulfillment-service:
    container_name: order-fulfillment-service
    build:
      context: ./fulfillment-service
    depends_on:
      - order-db
      - kafka
    networks:
      - backend
    environment:
      DB_HOST: order-db
      DB_PORT: 3306
      KAFKA_BROKERS: 'kafka:9092'
  order-db:
    container_name: order-db
    image: mysql:8.0
    restart: always
    environment:
      MYSQL_USER: 'admin'
      MYSQL_PASSWORD: 'admin'
      MYSQL_ROOT_PASSWORD: 'admin'
    entrypoint:
      sh -c "
      echo 'CREATE DATABASE IF NOT EXISTS order-manager-db; CREATE DATABASE IF NOT EXISTS order-fulfillment-db;' >/docker-entrypoint-initdb.d/init.sql;
      /usr/local/bin/docker-entrypoint.sh --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
      "
    ports:
      - '3306:3306'
    expose:
      - '3306'
    volumes:
      - order-db:/var/lib/mysql
    networks:
      - backend
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - target: 2181
        published: 2181
        protocol: tcp
        mode: host
    networks:
      - backend

  kafka:
    depends_on:
      - zookeeper
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - target: 9092
        published: 9092
        protocol: tcp
        mode: host
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CREATE_TOPICS: "order-events:1:1"
    volumes:
      - ./:/etc/kafka
    networks:
      - backend

volumes:
  order-db:
networks:
  backend:
    name: backend